/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
package it.csi.mudeopen.mudeopensrvsoap.interfacews.documenti;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;
/**
 * This class was generated by Apache CXF 3.2.2
 * 2023-03-06T09:18:52.792+01:00
 * Generated source version: 3.2.2
 *
 */
@WebServiceClient(name = "DocumentiSrvService",
                  wsdlLocation = "file:../_DOCS/_ANALISI/API/WSDL/DocumentiSrvService.wsdl",
                  targetNamespace = "http://documenti.business.mudesrvextsic.mude.csi.it/")
public class DocumentiSrvService extends Service {
    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://documenti.business.mudesrvextsic.mude.csi.it/", "DocumentiSrvService");
    public final static QName DocumentiSrvPort = new QName("http://documenti.business.mudesrvextsic.mude.csi.it/", "DocumentiSrvPort");
    static {
        URL url = null;
        try {
            url = new URL("file:../_DOCS/_ANALISI/API/WSDL/DocumentiSrvService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(DocumentiSrvService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:../_DOCS/_ANALISI/API/WSDL/DocumentiSrvService.wsdl");
        }
        WSDL_LOCATION = url;
    }
    public DocumentiSrvService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }
    public DocumentiSrvService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }
    public DocumentiSrvService() {
        super(WSDL_LOCATION, SERVICE);
    }
    public DocumentiSrvService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }
    public DocumentiSrvService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }
    public DocumentiSrvService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }
    /**
     *
     *     returns Documenti
     */
    @WebEndpoint(name = "DocumentiSrvPort")
    public Documenti getDocumentiSrvPort() {
        return super.getPort(DocumentiSrvPort, Documenti.class);
    }
    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     *     returns Documenti
     */
    @WebEndpoint(name = "DocumentiSrvPort")
    public Documenti getDocumentiSrvPort(WebServiceFeature... features) {
        return super.getPort(DocumentiSrvPort, Documenti.class, features);
    }
}
