/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.csi.mudeopen.mudeopensrvcommon.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

@javax.annotation.Generated(value = "it.csi.mudeopen.mudeopensrvcommon.business.be.helper.cosmo.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AssociationMetadata {
    @JsonProperty("prefixedName")
    private String prefixedName = null;

    @JsonProperty("title")
    private String title = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("modelDescriptor")
    private ModelDescriptor modelDescriptor = null;

    public AssociationMetadata prefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
        return this;
    }

    @ApiModelProperty(example = "cm:contentmodel", value = "Prefixed name dell'elemento.")
    public String getPrefixedName() {
        return prefixedName;
    }

    public void setPrefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
    }

    public AssociationMetadata title(String title) {
        this.title = title;
        return this;
    }

    @ApiModelProperty(value = "Titolo dell'elemento.")
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public AssociationMetadata description(String description) {
        this.description = description;
        return this;
    }

    @ApiModelProperty(example = "Alfresco Content Domain Model", value = "")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public AssociationMetadata modelDescriptor(ModelDescriptor modelDescriptor) {
        this.modelDescriptor = modelDescriptor;
        return this;
    }

    @ApiModelProperty(value = "")
    public ModelDescriptor getModelDescriptor() {
        return modelDescriptor;
    }

    public void setModelDescriptor(ModelDescriptor modelDescriptor) {
        this.modelDescriptor = modelDescriptor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssociationMetadata associationMetadata = (AssociationMetadata) o;
        return Objects.equals(this.prefixedName, associationMetadata.prefixedName) &&
                Objects.equals(this.title, associationMetadata.title) &&
                Objects.equals(this.description, associationMetadata.description) &&
                Objects.equals(this.modelDescriptor, associationMetadata.modelDescriptor);
    }

    @Override
    public int hashCode() {
        return Objects.hash(prefixedName, title, description, modelDescriptor);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AssociationMetadata {\n");

        sb.append("    prefixedName: ").append(toIndentedString(prefixedName)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    modelDescriptor: ").append(toIndentedString(modelDescriptor)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}