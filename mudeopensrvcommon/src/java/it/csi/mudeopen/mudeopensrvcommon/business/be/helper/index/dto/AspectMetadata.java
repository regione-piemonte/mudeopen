/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.csi.mudeopen.mudeopensrvcommon.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@ApiModel(description = "Definizione di un aspetto (aspect) del modello dei dati.")
@javax.annotation.Generated(value = "it.csi.mudeopen.mudeopensrvcommon.business.be.helper.cosmo.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AspectMetadata {
    @JsonProperty("prefixedName")
    private String prefixedName = null;

    @JsonProperty("title")
    private String title = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("modelDescriptor")
    private ModelDescriptor modelDescriptor = null;

    @JsonProperty("properties")
    private List<PropertyMetadata> properties = null;

    @JsonProperty("associations")
    private List<AssociationMetadata> associations = null;

    @JsonProperty("childAssociations")
    private List<AssociationMetadata> childAssociations = null;

    @JsonProperty("parentPrefixedName")
    private String parentPrefixedName = null;

    public AspectMetadata prefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
        return this;
    }

    @ApiModelProperty(example = "sys:referenceable", value = "Prefixed name dell'elemento.")
    public String getPrefixedName() {
        return prefixedName;
    }

    public void setPrefixedName(String prefixedName) {
        this.prefixedName = prefixedName;
    }

    public AspectMetadata title(String title) {
        this.title = title;
        return this;
    }

    @ApiModelProperty(example = "Referenceable", value = "Titolo dell'elemento.")
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public AspectMetadata description(String description) {
        this.description = description;
        return this;
    }

    @ApiModelProperty(example = "Referenceable", value = "Descrizione dell'elemento.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public AspectMetadata modelDescriptor(ModelDescriptor modelDescriptor) {
        this.modelDescriptor = modelDescriptor;
        return this;
    }

    @ApiModelProperty(value = "")
    public ModelDescriptor getModelDescriptor() {
        return modelDescriptor;
    }

    public void setModelDescriptor(ModelDescriptor modelDescriptor) {
        this.modelDescriptor = modelDescriptor;
    }

    public AspectMetadata properties(List<PropertyMetadata> properties) {
        this.properties = properties;
        return this;
    }

    public AspectMetadata addPropertiesItem(PropertyMetadata propertiesItem) {
        if (this.properties == null) {
            this.properties = new ArrayList<PropertyMetadata>();
        }
        this.properties.add(propertiesItem);
        return this;
    }

    @ApiModelProperty(value = "Definizioni delle propriet√† dell'aspetto.")
    public List<PropertyMetadata> getProperties() {
        return properties;
    }

    public void setProperties(List<PropertyMetadata> properties) {
        this.properties = properties;
    }

    public AspectMetadata associations(List<AssociationMetadata> associations) {
        this.associations = associations;
        return this;
    }

    public AspectMetadata addAssociationsItem(AssociationMetadata associationsItem) {
        if (this.associations == null) {
            this.associations = new ArrayList<AssociationMetadata>();
        }
        this.associations.add(associationsItem);
        return this;
    }

    @ApiModelProperty(value = "definizioni delle associazioni sorgente-destinazione dell'aspetto.")
    public List<AssociationMetadata> getAssociations() {
        return associations;
    }

    public void setAssociations(List<AssociationMetadata> associations) {
        this.associations = associations;
    }

    public AspectMetadata childAssociations(List<AssociationMetadata> childAssociations) {
        this.childAssociations = childAssociations;
        return this;
    }

    public AspectMetadata addChildAssociationsItem(AssociationMetadata childAssociationsItem) {
        if (this.childAssociations == null) {
            this.childAssociations = new ArrayList<AssociationMetadata>();
        }
        this.childAssociations.add(childAssociationsItem);
        return this;
    }

    @ApiModelProperty(value = "Definizioni delle associazioni padre-figlio dell'aspetto.")
    public List<AssociationMetadata> getChildAssociations() {
        return childAssociations;
    }

    public void setChildAssociations(List<AssociationMetadata> childAssociations) {
        this.childAssociations = childAssociations;
    }

    public AspectMetadata parentPrefixedName(String parentPrefixedName) {
        this.parentPrefixedName = parentPrefixedName;
        return this;
    }

    @ApiModelProperty(example = "cm:content", value = "Prefixed name dell'aspetto padre, se presente, altrimenti null.")
    public String getParentPrefixedName() {
        return parentPrefixedName;
    }

    public void setParentPrefixedName(String parentPrefixedName) {
        this.parentPrefixedName = parentPrefixedName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AspectMetadata aspectMetadata = (AspectMetadata) o;
        return Objects.equals(this.prefixedName, aspectMetadata.prefixedName) &&
                Objects.equals(this.title, aspectMetadata.title) &&
                Objects.equals(this.description, aspectMetadata.description) &&
                Objects.equals(this.modelDescriptor, aspectMetadata.modelDescriptor) &&
                Objects.equals(this.properties, aspectMetadata.properties) &&
                Objects.equals(this.associations, aspectMetadata.associations) &&
                Objects.equals(this.childAssociations, aspectMetadata.childAssociations) &&
                Objects.equals(this.parentPrefixedName, aspectMetadata.parentPrefixedName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(prefixedName, title, description, modelDescriptor, properties, associations, childAssociations, parentPrefixedName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AspectMetadata {\n");

        sb.append("    prefixedName: ").append(toIndentedString(prefixedName)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    modelDescriptor: ").append(toIndentedString(modelDescriptor)).append("\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
        sb.append("    childAssociations: ").append(toIndentedString(childAssociations)).append("\n");
        sb.append("    parentPrefixedName: ").append(toIndentedString(parentPrefixedName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}