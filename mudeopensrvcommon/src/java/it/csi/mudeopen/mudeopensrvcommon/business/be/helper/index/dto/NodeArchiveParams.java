/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.csi.mudeopen.mudeopensrvcommon.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

@ApiModel(description = "Parametri per la restituzione dei contenuti cancellati.")
@javax.annotation.Generated(value = "it.csi.mudeopen.mudeopensrvcommon.business.be.helper.cosmo.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class NodeArchiveParams {
    @JsonProperty("typePrefixedName")
    private String typePrefixedName = null;

    @JsonProperty("pageSize")
    private Integer pageSize = null;

    @JsonProperty("pageIndex")
    private Integer pageIndex = null;

    @JsonProperty("limit")
    private Integer limit = null;

    @JsonProperty("typeAsAspect")
    private Boolean typeAsAspect = null;

    public NodeArchiveParams typePrefixedName(String typePrefixedName) {
        this.typePrefixedName = typePrefixedName;
        return this;
    }

    @ApiModelProperty(example = "cm:content", value = "Prefixed name del tipo dei nodi o di un aspetto dei nodi da usare come filtro della ricerca.")
    public String getTypePrefixedName() {
        return typePrefixedName;
    }

    public void setTypePrefixedName(String typePrefixedName) {
        this.typePrefixedName = typePrefixedName;
    }

    public NodeArchiveParams pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    @ApiModelProperty(example = "10", value = "Dimensione della pagina della ricerca.")
    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public NodeArchiveParams pageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
        return this;
    }

    @ApiModelProperty(example = "1", value = "Indice della pagina della ricerca.")
    public Integer getPageIndex() {
        return pageIndex;
    }

    public void setPageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
    }

    public NodeArchiveParams limit(Integer limit) {
        this.limit = limit;
        return this;
    }

    @ApiModelProperty(example = "0", value = "Numero massimo di associazioni da ricercare.")
    public Integer getLimit() {
        return limit;
    }

    public void setLimit(Integer limit) {
        this.limit = limit;
    }

    public NodeArchiveParams typeAsAspect(Boolean typeAsAspect) {
        this.typeAsAspect = typeAsAspect;
        return this;
    }

    @ApiModelProperty(value = "Impostare true se il prefixed name da usare come filtro definisce il tipo di un nodo, false se definisce un aspetto.")
    public Boolean isTypeAsAspect() {
        return typeAsAspect;
    }

    public void setTypeAsAspect(Boolean typeAsAspect) {
        this.typeAsAspect = typeAsAspect;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NodeArchiveParams nodeArchiveParams = (NodeArchiveParams) o;
        return Objects.equals(this.typePrefixedName, nodeArchiveParams.typePrefixedName) &&
                Objects.equals(this.pageSize, nodeArchiveParams.pageSize) &&
                Objects.equals(this.pageIndex, nodeArchiveParams.pageIndex) &&
                Objects.equals(this.limit, nodeArchiveParams.limit) &&
                Objects.equals(this.typeAsAspect, nodeArchiveParams.typeAsAspect);
    }

    @Override
    public int hashCode() {
        return Objects.hash(typePrefixedName, pageSize, pageIndex, limit, typeAsAspect);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NodeArchiveParams {\n");

        sb.append("    typePrefixedName: ").append(toIndentedString(typePrefixedName)).append("\n");
        sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
        sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
        sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("    typeAsAspect: ").append(toIndentedString(typeAsAspect)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}