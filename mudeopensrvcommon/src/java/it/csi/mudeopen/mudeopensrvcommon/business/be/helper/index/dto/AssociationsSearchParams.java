/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.csi.mudeopen.mudeopensrvcommon.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@ApiModel(description = "Rappresenta i parametri per la ricerca di associazioni.")
@javax.annotation.Generated(value = "it.csi.mudeopen.mudeopensrvcommon.business.be.helper.cosmo.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AssociationsSearchParams {
    @JsonProperty("limit")
    private Integer limit = null;

    @JsonProperty("pageSize")
    private Integer pageSize = null;

    @JsonProperty("pageIndex")
    private Integer pageIndex = null;

    @JsonProperty("filterType")
    private List<String> filterType = null;

    public AssociationsSearchParams limit(Integer limit) {
        this.limit = limit;
        return this;
    }

    @ApiModelProperty(example = "0", value = "Numero massimo di associazioni da ricercare.")
    public Integer getLimit() {
        return limit;
    }

    public void setLimit(Integer limit) {
        this.limit = limit;
    }

    public AssociationsSearchParams pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    @ApiModelProperty(example = "10", value = "Dimesione della pagina da ricercare.")
    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public AssociationsSearchParams pageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
        return this;
    }

    @ApiModelProperty(example = "0", value = "Numero di pagina da ricercare.")
    public Integer getPageIndex() {
        return pageIndex;
    }

    public void setPageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
    }

    public AssociationsSearchParams filterType(List<String> filterType) {
        this.filterType = filterType;
        return this;
    }

    public AssociationsSearchParams addFilterTypeItem(String filterTypeItem) {
        if (this.filterType == null) {
            this.filterType = new ArrayList<String>();
        }
        this.filterType.add(filterTypeItem);
        return this;
    }

    @ApiModelProperty(value = "Tipi di associazioni da ricercare.")
    public List<String> getFilterType() {
        return filterType;
    }

    public void setFilterType(List<String> filterType) {
        this.filterType = filterType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssociationsSearchParams associationsSearchParams = (AssociationsSearchParams) o;
        return Objects.equals(this.limit, associationsSearchParams.limit) &&
                Objects.equals(this.pageSize, associationsSearchParams.pageSize) &&
                Objects.equals(this.pageIndex, associationsSearchParams.pageIndex) &&
                Objects.equals(this.filterType, associationsSearchParams.filterType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(limit, pageSize, pageIndex, filterType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AssociationsSearchParams {\n");

        sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
        sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
        sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}