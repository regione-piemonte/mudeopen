/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.csi.mudeopen.mudeopensrvcommon.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@ApiModel(description = "Risultato della ricerca Lucene.")
@javax.annotation.Generated(value = "it.csi.mudeopen.mudeopensrvcommon.business.be.helper.cosmo.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LuceneSearchResponse {
    @JsonProperty("totalResults")
    private Integer totalResults = null;

    @JsonProperty("pageSize")
    private Integer pageSize = null;

    @JsonProperty("pageIndex")
    private Integer pageIndex = null;

    @JsonProperty("nodes")
    private List<Node> nodes = null;

    public LuceneSearchResponse totalResults(Integer totalResults) {
        this.totalResults = totalResults;
        return this;
    }

    @ApiModelProperty(example = "1000", value = "Numero totale di risultati della ricerca.")
    public Integer getTotalResults() {
        return totalResults;
    }

    public void setTotalResults(Integer totalResults) {
        this.totalResults = totalResults;
    }

    public LuceneSearchResponse pageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    @ApiModelProperty(example = "10", value = "Dimensione della pagina della ricerca.")
    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public LuceneSearchResponse pageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
        return this;
    }

    @ApiModelProperty(example = "1", value = "Indice della pagina della ricerca.")
    public Integer getPageIndex() {
        return pageIndex;
    }

    public void setPageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
    }

    public LuceneSearchResponse nodes(List<Node> nodes) {
        this.nodes = nodes;
        return this;
    }

    public LuceneSearchResponse addNodesItem(Node nodesItem) {
        if (this.nodes == null) {
            this.nodes = new ArrayList<Node>();
        }
        this.nodes.add(nodesItem);
        return this;
    }

    @ApiModelProperty(value = "Elenco dei nodi risultato della ricerca.")
    public List<Node> getNodes() {
        return nodes;
    }

    public void setNodes(List<Node> nodes) {
        this.nodes = nodes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LuceneSearchResponse luceneSearchResponse = (LuceneSearchResponse) o;
        return Objects.equals(this.totalResults, luceneSearchResponse.totalResults) &&
                Objects.equals(this.pageSize, luceneSearchResponse.pageSize) &&
                Objects.equals(this.pageIndex, luceneSearchResponse.pageIndex) &&
                Objects.equals(this.nodes, luceneSearchResponse.nodes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(totalResults, pageSize, pageIndex, nodes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class LuceneSearchResponse {\n");

        sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
        sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
        sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
        sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}