/*
 *  SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
 *  SPDX-License-Identifier: EUPL-1.2
 */
/*
 * ECMEngine
 * Servizi di fruizione ECM INDEX.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.csi.mudeopen.mudeopensrvcommon.business.be.helper.index.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

@ApiModel(description = "Rappresenta una ACL. Una ACL permette di definire quale permesso è concesso o negato a una specifica autority. Un'autority può essere un utente o un gruppo del tenant. I permessi possono essere:   >       Consumer: lettura.     Editor: lettura e modifica.     Contributor: lettura e creazione.     Collaborator: lettura, modifica e creazione.    Si consiglia di utilizzare solo ACL permissive, in quanto il comportamento di default è remissivo (se non ci sono ACL impostate, l'accesso viene negato).    Si ricorda che sulla company home del tenant /app:company_home è definita una ACL ereditata permissiva di tipo GROUP_EVERYONE - Consumer, che permette di default a tutti gli utenti di leggere tutto il contenuto del tenant: se questo non è il comportamento desiderato, è possibile rimuovere l'ereditarietà della ACL con il servizio setInheritsAcl.    Le operazioni eseguite con l'utente admin del tenant non sono sottoposte ad alcuna ACL. ")
@javax.annotation.Generated(value = "it.csi.mudeopen.mudeopensrvcommon.business.be.helper.cosmo.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-29T13:41:28.556Z")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AclRecord {
    @JsonProperty("authority")
    private String authority = null;

    @JsonProperty("permission")
    private String permission = null;

    @JsonProperty("accessAllowed")
    private Boolean accessAllowed = null;

    public AclRecord authority(String authority) {
        this.authority = authority;
        return this;
    }

    @ApiModelProperty(example = "user", value = "Rappresenta l'autority.")
    public String getAuthority() {
        return authority;
    }

    public void setAuthority(String authority) {
        this.authority = authority;
    }

    public AclRecord permission(String permission) {
        this.permission = permission;
        return this;
    }

    @ApiModelProperty(example = "Consumer", value = "Rappresenta il permesso.")
    public String getPermission() {
        return permission;
    }

    public void setPermission(String permission) {
        this.permission = permission;
    }

    public AclRecord accessAllowed(Boolean accessAllowed) {
        this.accessAllowed = accessAllowed;
        return this;
    }

    @ApiModelProperty(value = "Comportamento permissivo o remissivo dell'ACL.")
    public Boolean isAccessAllowed() {
        return accessAllowed;
    }

    public void setAccessAllowed(Boolean accessAllowed) {
        this.accessAllowed = accessAllowed;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AclRecord aclRecord = (AclRecord) o;
        return Objects.equals(this.authority, aclRecord.authority) &&
                Objects.equals(this.permission, aclRecord.permission) &&
                Objects.equals(this.accessAllowed, aclRecord.accessAllowed);
    }

    @Override
    public int hashCode() {
        return Objects.hash(authority, permission, accessAllowed);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AclRecord {\n");

        sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
        sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
        sb.append("    accessAllowed: ").append(toIndentedString(accessAllowed)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}